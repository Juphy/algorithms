//「01背包」是指给定物品价值与体积（对应了「给定价值与成本」），在规定容量下（对应了「限定决策规则」）如何使得所选物品的总价值最大。

// 有N件物品和一个容量是V的背包。每件物品有且只有一件。

// 第i件物品的体积是v[i]，价值是w[i]。

// 求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。


// 输入: N = 3, V = 4, v = [4, 2, 3], w = [4, 2, 3]
// 输出: 4
// 解释: 只选第一件物品，可使价值最大。

// 输入: N = 3, V = 5, v = [4, 2, 3], w = [4, 2, 3]
// 输出: 5
// 解释: 不选第一件物品，选择第二件和第三件物品，可使价值最大。

/**
 * dp 考虑前 i 件物品，使用容量不超过 C 的条件下的背包最大价值。
 * 对于第i件商品，有选和不选两种决策
 * 不选：dp[i-1][C] 只考虑前 i 件物品，当前容量为 c 的情况下的最大价值
 * 选：选取第i件商品，v[i], w[i]，那么前C-v[i]最大价值dp[i-1][c-v[i]] + w[i]
 * dp[i][c] = max(dp[i-1][c], dp[i-1][c-v[i]] + w[i])
 */
function f(N, C, v, w){
    let dp = new Array(N).fill(new Array(C+1))
    for(let i = 0; i <= C; i++){
        dp[0][i] = i >= v[0] ? w[0] : 0
        
    }
}